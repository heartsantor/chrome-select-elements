import { TimeDescriptor } from '@sindresorhus/to-milliseconds';
declare type Primitive = boolean | number | string;
declare type Value = Primitive | Primitive[] | Record<string, any>;
declare function has(key: string): Promise<boolean>;
declare function get<ScopedValue extends Value>(key: string): Promise<ScopedValue | undefined>;
declare function set<ScopedValue extends Value>(key: string, value: ScopedValue, maxAge?: TimeDescriptor): Promise<ScopedValue>;
declare function delete_(key: string): Promise<void>;
declare function clear(): Promise<void>;
interface MemoizedFunctionOptions<Arguments extends any[], ScopedValue> {
    maxAge?: TimeDescriptor;
    staleWhileRevalidate?: TimeDescriptor;
    cacheKey?: (args: Arguments) => string;
    shouldRevalidate?: (cachedValue: ScopedValue) => boolean;
}
declare function function_<ScopedValue extends Value, Getter extends (...args: any[]) => Promise<ScopedValue | undefined>, Arguments extends Parameters<Getter>>(getter: Getter, { cacheKey, maxAge, staleWhileRevalidate, shouldRevalidate, }?: MemoizedFunctionOptions<Arguments, ScopedValue>): Getter;
declare const cache: {
    has: typeof has;
    get: typeof get;
    set: typeof set;
    clear: typeof clear;
    function: typeof function_;
    delete: typeof delete_;
};
export default cache;
